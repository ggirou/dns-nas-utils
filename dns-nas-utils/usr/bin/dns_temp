#!/bin/bash
#
# Get temperature from a Dlink DNS-320's microcontroller
#
# Copyright (C) 2012 Jamie Lentin <jm@lentin.co.uk>
#
# This file is licensed under the terms of the GNU General Public
# License version 2.  This program is licensed "as is" without any
# warranty of any kind, whether express or implied.

[ "$1" = "-v" ] && verbose=1

unset LANG	# A UTF-8 LANG will cause bashes read to read multibyte characters
export LC_ALL=C # Force a non UTF-8 Lang to load (prevent multibyte characters)
IFS=''		# Stop read treating " " as a field separator

# A DNS-325 will have a kernel-supported sensor, prefer that over ttyS1
temp_file="`ls -1 /sys/class/hwmon/hwmon?/device/temp1_input 2>/dev/null`"
if [ -n "$temp_file" ]; then
  echo $[`cat $temp_file` / 1000]
  exit 0
fi

# Set up serial port
stty --file /dev/ttyS1 cs8 -cstopb -crtscts -ixon -ixoff -ignpar cread 19200

(
  # Wait for main thread to be ready before issuing command
  sleep 0.1s
  # D-link did "sleep 0.2s" between each of these, doesn't seem to help
  echo -ne "\xf0\xf0\x10\x04\x02"
  echo -ne "\x00\x00\x00\x00"
  echo -ne "\x00\x00\x00\x00"
  echo -ne "\xf6\xf6\xf6"
) >/dev/ttyS1 &

(
  pos=0
  temp=0
  ch=0 ; p1=0 ; p2=0
  while read -d '' -r -n 1 -t 2 -s raw; do
    ch=$(printf "%d" "'$raw")
    [ -n "$verbose" ] && debug="`printf "$debug %x" $ch`"
    
    # If have initial 0xf0 0xf0 0xd0, then know where temperature is
    [ "$pos" = "2" -a "$p2" -eq "240" \
                   -a "$p1" -eq "240" \
                   -a "$ch" -eq "208" ] && packet="std"
    [ "$pos" = "5" -a "$packet" = "std" ] && temp=$ch
    
    # Three equal non-null bytes is the checksum at the end
    [ "$ch" -gt "0" -a "$p2" -eq "$ch" \
                    -a "$p1" -eq "$ch" ] && { checksum="$ch"; break; }
    pos=$[pos+1]
    p2=$p1
    p1=$ch
  done
  [ -n "$verbose" ] && printf "debug: $debug\n" 1>&2
  if [ "$temp" -gt "0" ]; then
    # Got a temperature
    echo $temp
  elif [ -n "$checksum" ]; then
    # Found a checksum that tells us the temperature
    echo $[checksum - 182]
  else
    echo "Unknown response: $debug" 1>&2
  fi
) </dev/ttyS1

# == Request ==
#  0xf0 0xf0 0x10 0x04
#  0x02 0x00 0x00 0x00
#  0x00 0x00 0x00 0x00
#  0x00 0xf6 0xf6 0xf6
# == Response ===
# General return format:-
#  0xf0 0xf0 0xd0 (x)
#  0x02 (t)  0x00 0x00
#  0x00 0x00 0x00 0x00
#  0x00 (cs) (cs) (cs)
#   (x) = 0x00 or 0x04
#   (t) = Temperature in degC
#  (cs) = 0xb6 + (t)
#
# Malformed:-
# 28degC: 0 0 0 0 0 0 0 d2 d2 d2
#
# == Testing ==
# Switch input/output to STDIN & /dev/null
# for f in `seq 0 50`; do
#   echo -n "$f : "
#   echo -ne "\xf0\xf0\xd0\x04\x02\x$(printf "%x" $f)\x00\x00\x00\x00\x00\x00\x00\xb6\xb6\xb6" | ./dns-nas-utils/usr/bin/dns_temp
# done
